// TODO create ContainerImage task type
// TODO check and install docker command
// TODO maybe provide podman option to build image
// TODO create a task to login registry

plugins {
    id "base"
}

task build_alluxio {
  def context = "alluxio"
  def image = "registry.cn-shanghai.aliyuncs.com/potatobox/alluxio"

  def iidFile = "$buildDir/$context/iid"

  inputs.dir context
  inputs.property("image", image)

  outputs.file iidFile

  doLast {
    exec {
      workingDir context
      commandLine "docker", "build", "--iidfile", iidFile, "-t", "$image", "."
      def buildLog = new FileOutputStream("$buildDir/$context/build.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}

task push_alluxio {
  dependsOn build_alluxio

  doLast {
    exec {
      commandLine "docker", "push", build_alluxio.inputs.properties.image
      def buildLog = new FileOutputStream("$buildDir/alluxio/push.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}


task build_hadoop {
  def context = "hadoop"
  def image = "registry.cn-shanghai.aliyuncs.com/potatobox/hadoop"

  def iidFile = "$buildDir/$context/iid"

  inputs.dir context
  inputs.files(build_alluxio.outputs.files)
  inputs.property("image", image)

  outputs.file iidFile

  doLast {
    exec {
      workingDir context
      def args = [
        "BASE_IMAGE": resources.text.fromFile(build_alluxio).asString()
      ]

      def buildArgs = (args.collect { ["--build-arg", "$it.key=$it.value"] }).flatten()
      commandLine(["docker", "build", "--iidfile", iidFile, "-t", "$image", "."] + buildArgs)
      def buildLog = new FileOutputStream("$buildDir/$context/build.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}

task push_hadoop {
  dependsOn build_hadoop

  doLast {
    exec {
      commandLine "docker", "push", build_hadoop.inputs.properties.image
      def buildLog = new FileOutputStream("$buildDir/hadoop/push.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}


task build_hive {
  def context = "hive"
  def image = "registry.cn-shanghai.aliyuncs.com/potatobox/hive"

  def iidFile = "$buildDir/$context/iid"

  inputs.dir context
  inputs.files(build_hadoop.outputs.files)
  inputs.property("image", image)

  outputs.file iidFile

  doLast {
    exec {
      workingDir context
      def args = [
        "BASE_IMAGE": resources.text.fromFile(build_hadoop).asString()
      ]

      def buildArgs = (args.collect { ["--build-arg", "$it.key=$it.value"] }).flatten()
      commandLine(["docker", "build", "--iidfile", iidFile, "-t", "$image", "."] + buildArgs)
      def buildLog = new FileOutputStream("$buildDir/$context/build.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}

task push_hive {
  dependsOn build_hive

  doLast {
    exec {
      commandLine "docker", "push", build_hive.inputs.properties.image
      def buildLog = new FileOutputStream("$buildDir/hive/push.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}


task build_presto {
  def context = "presto"
  def image = "registry.cn-shanghai.aliyuncs.com/potatobox/presto"

  def iidFile = "$buildDir/$context/iid"

  inputs.dir context
  inputs.files(build_alluxio.outputs.files)
  inputs.property("image", image)

  outputs.file iidFile

  doLast {
    exec {
      workingDir context
      def args = [
        "ALLUXIO_IMAGE": resources.text.fromFile(build_alluxio).asString()
      ]

      def buildArgs = (args.collect { ["--build-arg", "$it.key=$it.value"] }).flatten()
      commandLine(["docker", "build", "--iidfile", iidFile, "-t", "$image", "."] + buildArgs)
      def buildLog = new FileOutputStream("$buildDir/$context/build.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}

task push_presto {
  dependsOn build_presto

  doLast {
    exec {
      commandLine "docker", "push", build_presto.inputs.properties.image
      def buildLog = new FileOutputStream("$buildDir/presto/push.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}


task build_spark {
  def context = "spark"
  def image = "registry.cn-shanghai.aliyuncs.com/potatobox/spark"

  def iidFile = "$buildDir/$context/iid"

  inputs.dir context
  inputs.files(build_alluxio.outputs.files)
  inputs.files(build_hive.outputs.files)
  inputs.property("image", image)

  outputs.file iidFile

  doLast {
    exec {
      workingDir context
      def args = [
        "ALLUXIO_IMAGE": resources.text.fromFile(build_alluxio).asString(),
        "BASE_IMAGE": resources.text.fromFile(build_hive).asString(),
      ]

      def buildArgs = (args.collect { ["--build-arg", "$it.key=$it.value"] }).flatten()
      commandLine(["docker", "build", "--iidfile", iidFile, "-t", "$image", "."] + buildArgs)
      def buildLog = new FileOutputStream("$buildDir/$context/build.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}

task push_spark {
  dependsOn build_spark

  doLast {
    exec {
      commandLine "docker", "push", build_spark.inputs.properties.image
      def buildLog = new FileOutputStream("$buildDir/spark/push.log")
      standardOutput = buildLog
      errorOutput = buildLog
    }
  }
}


build.finalizedBy build_alluxio, build_hadoop, build_hive, build_presto, build_spark

task login_docker_registry {
  doLast {
    exec {
      commandLine "bash", "-c", "aliyun cr GetAuthorizationToken | jq -r .data.authorizationToken | docker login -u cr_temp_user registry.cn-shanghai.aliyuncs.com --password-stdin > /dev/null"
    }
  }
}

tasks.findAll { task -> task.name.startsWith('push_') } each {
  it.dependsOn login_docker_registry
}

task push {
  dependsOn tasks.findAll { task -> task.name.startsWith('push_') }
}
